#+TITLE: Will's Emacs Config
#+AUTHOR: Will
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args:emacs-lisp :tangle yes

* TABLE OF CONTENTS :toc:
- [[#packages][Packages]]
  - [[#general-keybindings][General Keybindings]]
  - [[#org][Org]]
  - [[#diary][Diary]]
  - [[#latex][LaTeX]]
  - [[#lilypond][Lilypond]]
  - [[#which-key][Which-key]]
  - [[#ui-packages][UI packages]]
  - [[#better-completions][Better completions]]
  - [[#better-searching][Better searching]]
  - [[#embark][Embark]]
  - [[#avy][Avy]]
  - [[#better-undo][Better undo]]
  - [[#magit][Magit]]
  - [[#dired][Dired]]
  - [[#spellcheck][Spellcheck]]
  - [[#openwith][Openwith]]
  - [[#aggressive-indent][Aggressive indent]]
  - [[#programming-languages][Programming languages]]
- [[#base-settings][Base settings]]
  - [[#fonts][Fonts]]
  - [[#ui][UI]]
  - [[#execute-when-using-daemon][Execute when using daemon]]
  - [[#backups][Backups]]
  - [[#autosaves][Autosaves]]
  - [[#reload-files-on-change][Reload files on change]]
  - [[#ibuffer][IBuffer]]
- [[#my-modes][My modes]]
  - [[#tab-out-mode][Tab out mode]]
- [[#tangle-on-save][Tangle on save]]

* Packages
** General Keybindings
#+begin_src emacs-lisp
  (use-package general
    :ensure t)
#+end_src

*** Global keys
#+begin_src emacs-lisp
  (general-def
    ;; Consult
    "C-s" 'consult-line
    "C-x b" 'consult-buffer
    "M-g M-g" 'consult-goto-line
    "M-g g" 'consult-goto-line
    "M-s f" 'consult-find
    "M-s r" 'consult-ripgrep
    ;; Helpful
    [remap describe-function] 'helpful-function
    [remap describe-symbol] 'helpful-symbol
    [remap describe-command] 'helpful-command
    [remap descrive-variable] 'helpful-variable
    [remap describe-key] 'helpful-key
    ;; IBuffer
    "C-x C-b" 'ibuffer
    ;; Embark
    "C-." 'embark-act
    ;; Avy
    "M-j" 'avy-goto-char-timer
    ;; Org capture
    "C-c c" 'org-capture
    ;; Org agenda
    "C-c a" 'org-agenda-list)
#+end_src

*** Minibuffer keys
#+begin_src emacs-lisp
  (general-def minibuffer-local-map
    "M-h" 'backward-kill-word
    ;; Consult
    "C-r" 'consult-history)
#+end_src

*** Remap to use dired-single
# #+begin_src emacs-lisp
#   (general-def dired-mode-map
#     [remap dired-find-file] 'dired-single-buffer
#     [remap dired-mouse-find-file-other-window] 'dired-single-buffer-mouse
#     [remap dired-up-directory] 'dired-single-up-directory)
# #+end_src

*** Company
#+begin_src emacs-lisp
  (general-def company-active-map
    "C-n" 'company-select-next
    "C-p" 'company-select-previous
    "M-<" 'company-select-first
    "M->" 'company-select-last
    "TAB" 'company-complete)
#+end_src

** Org
*** Src code blocks with tempo
| Typing the below + TAB | Expands to...              |
| <a                     | '#+begin_export ascii' ... |
| <c                     | '#+begin_center' ...       |
| <C                     | '#+begin_comment' ...      |
| <e                     | '#+begin_example' ...      |
| <E                     | '#+begin_export' ...       |
| <h                     | '#+begin_export html' ...  |
| <l                     | '#+begin_export latex' ... |
| <q                     | '#+begin_quote' ...        |
| <s                     | '#+begin_src' ...          |
| <v                     | '#+begin_verse' ...        |

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

*** Table of contents 

#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Bullets

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :ensure t
    :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

*** Todo
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO" "|" "DONE")))
#+end_src

*** Agenda (Super agenda)
#+begin_src emacs-lisp
  (setq org-directory "~/Documents/Planning"
        org-agenda-files 
        (directory-files-recursively "~/Documents/Planning/Agenda" "\\.org$"))

  (use-package org-super-agenda
    :ensure t
    :init (org-super-agenda-mode))

  (setq org-super-agenda-groups
        '((:name "Today"
                 :time-grid t
                 :todo "TODAY")))
#+end_src

*** Capture
#+begin_src emacs-lisp
  (use-package doct
    :ensure t)

  (setq org-capture-templates
        (doct '(("Tasks" :keys "t"
                 :file "~/Documents/Planning/Agenda/Agenda.org"
                 :prepend t
                 :template ("* %{todo-state} %^{Description}"
                            "%^{Schedule||SCHEDULED:|DEADLINE:} %^t"
                            ":PROPERTIES:"
                            ":Created: %U"
                            ":LINK: %a"
                            ":END:"
                            "%?")
                 :children (("Task" :keys "t"
                             :headline "General"
                             :todo-state "TODO")
                            ("School" :keys "s"
                             :headline "School"
                             :todo-state "TODO")
                            )))))
#+end_src

** Diary
#+begin_src emacs-lisp
  (setq diary-file "~/Documents/Planning/diary")
#+end_src

** LaTeX
*** AucTeX
#+begin_src emacs-lisp
  (load "auctex.el" nil t t)
  (load "preview-latex.el" nil t t)

  (setq TeX-auto-save t
        TeX-parse-self t
        TeX-electric-math (cons "$" "$")
        LaTeX-electric-left-right-brace t
        TeX-electric-sub-and-superscript t
        LaTeX-math-menu-unicode t
        TeX-insert-macro-default-style 'show-optional-args)
  (add-hook 'LaTeX-mod-hook 'LaTeX-math-mode)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+end_src

*** RefTeX
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTex t)
#+end_src

** Lilypond
#+begin_src emacs-lisp
  (require 'lilypond-mode)

  (use-package LilyPond-mode
    :mode "\\.ly\\'"
    :config
    (setq LilyPond-pdf-command "zathura"))
#+end_src

** Which-key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode 1)
    :config
    (setq which-key-idle-delay 0.5))
#+end_src

** UI packages

*** Doom themes

#+begin_src emacs-lisp
  ;; (use-package doom-themes
  ;;   :ensure t
  ;;   :config
  ;;   (setq doom-themes-enable-bold t
  ;;         doom-themes-enable-italic t)
  ;;   (load-theme 'doom-solarized-dark t)
  ;;   (doom-themes-visual-bell-config))
#+end_src

*** Doom modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-buffer-file-name-style 'truncate-except-project))

  ;; Taken from the doom-modeline FAQ to fix right side cutoff
  (setq nerd-icons-scale-factor 1.1)
#+end_src

*** Icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+end_src

*** Rainbow delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Better completions
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init (vertico-mode)
    :config (setq vertico-cycle t))
#+end_src

*** Save minibuffer history
#+begin_src emacs-lisp
  (use-package savehist
    :init (savehist-mode)
    :config (setq history-length 25))
#+end_src

** Better searching
*** Consult
#+begin_src emacs-lisp
  (use-package consult
    :ensure t)
#+end_src

*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :after (vertico)
    :init (marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

*** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t)
#+end_src

*** Orderless (fuzzy searching)
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless)))
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t
    :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t)

  (setq avy-keys '(?q ?e ?r ?y ?u ?o ?p
                      ?a ?s ?d ?f ?g ?h ?j
                      ?k ?l ?' ?x ?c ?v ?b
                      ?n ?, ?/))

  (defun avy-show-dispatch-help ()  
    (let* ((len (length "avy-action-"))
           (fw (frame-width))
           (raw-strings (mapcar
                         (lambda (x)
                           (format "%2s: %-19s"
                                   (propertize
                                    (char-to-string (car x))
                                    'face 'aw-key-face)
                                   (substring (symbol-name (cdr x)) len)))
                         avy-dispatch-alist))
           (max-len (1+ (apply #'max (mapcar #'length raw-strings))))
           (strings-len (length raw-strings))
           (per-row (floor fw max-len))
           display-strings)
      (cl-loop for string in raw-strings
               for N from 1 to strings-len do
               (push (concat string " ") display-strings)
               (when (= (mod N per-row) 0) (push "\n" display-strings)))
      (message "%s" (apply #'concat (nreverse display-strings)))))

  ;; Kill text
  (defun avy-action-kill-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (kill-whole-line))
    (select-window
     (cdr
      (ring-def avy-ring 0)))
    t)

  (setf (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
        (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line)

  ;; Copy text
  (defun avy-action-copy-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (cl-destructuring-bind (start . end)
          (bounds-of-thing-at-point 'line)
        (copy-region-as-kill start end)))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)

  (setf (alist-get ?w avy-dispatch-alist) 'avy-action-copy
        (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line)

  ;; Yank text
  (defun avy-action-yank-whole-line (pt)
    (avy-action-copy-whole-line pt)
    (save-excursion (yank))
    t)

  (setf (alist-get ?y avy-dispatch-alist) 'avy-action-yank
        (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line)

  ;; Transpose/Move text
  (defun avy-action-teleport-whole-line (pt)
    (avy-action-kill-whole-line pt)
    (save-excursion (yank)) t)

  (setf (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
        (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line)

  ;; Mark text
  (defun avy-action-mark-to-char (pt)
    (activate-mark)
    (goto-char pt))

  (setf (alist-get ?  avy-dispatch-alist) 'avy-action-mark-to-char)

  ;; Get Elisp Help
  (defun avy-action-helpful (pt)
    (save-excursion
      (goto-char pt)
      (helpful-at-point))
    (select-window
     (cdr (ring-ref avy-ring 0)))
    t)

  (setf (alist-get ?H avy-dispatch-alist) 'avy-action-helpful)

  ;; Embark
  (defun avy-action-embark (pt)
    (unwind-protect
        (save-excursion
          (goto-char pt)
          (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t)

  (setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
#+end_src

** Better undo
#+begin_src emacs-lisp
  (use-package undo-fu
    :ensure t)
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

In my previous config, I had the 'ssh-agency' package installed, although it seems this may not be necessary.

** Dired
#+begin_src emacs-lisp
  (use-package dired
    :commands (dired dired-jump)
    :custom (dired-listing-switches "-agho --group-directories-first"))

  ;;(use-package dired-single
  ;;  :ensure t
  ;;  :after (dired))

  (use-package dired-hide-dotfiles
    :ensure t
    :hook (dired-mode . dired-hide-dotfiles-mode))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode))

  (setq dired-kill-when-opening-new-dired-buffer 1)
#+end_src

** Spellcheck
#+begin_src emacs-lisp
  (use-package ispell
    :config
    (setq ispell-program-name "aspell"))

  (use-package flycheck
    :ensure t)
#+end_src

** Openwith
#+begin_src emacs-lisp
  (use-package openwith
    :ensure t
    :config
    (when (require 'openwith nil 'noerror)
      (setq openwith-associations
            (list
             (list (openwith-make-extension-regexp
                    '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
                   "libreoffice"
                   '(file))
             (list (openwith-make-extension-regexp
                    '("mgp" "mpeg" "mp3" "mp4"
                      "avi" "wmv" "wav" "mov" "flv"
                      "ogn" "ogg" "mkv"))
                   "mpv"
                   '(file))
             (list (openwith-make-extension-regexp
                    '("pdf"))
                   "zathura"
                   '(file))
             (list (openwith-make-extension-regexp
                    '("png" "jpeg" "jpg" "heic"))
                   "nomacs"
                   '(file))))
      (openwith-mode 1)))
#+end_src

** Aggressive indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :init (global-aggressive-indent-mode 1))
#+end_src

** Programming languages

*** Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0
          company-minimum-prefix-length 2)
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
*** LSP
#+begin_src emacs-lisp
  (use-package eglot
    :after (direnv)
    :custom
    (eglot-autoshutdown t)
    (eglot-confirm-server-initiated-edits nil))
#+end_src

*** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")

  (use-package nix-flake
    :after (nix-mode))
#+end_src

**** Direnv
#+begin_src emacs-lisp
  (use-package direnv
    :ensure t
    :config (direnv-mode))
#+end_src

*** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'eglot-ensure))
#+end_src

*** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :ensure t
    :config
    (add-hook 'zig-mode-hook 'eglot-ensure))
#+end_src

* Base settings
** Fonts

#+begin_src emacs-lisp
  (defun will/set-font-faces ()
    (message "setting fonts")
    (set-face-attribute 'default nil
			:font "FiraCode Nerd Font Mono"
			:height 110
			:weight 'medium)
    (set-face-attribute 'variable-pitch nil
			:font "TeX Gyre Schola"
			:height 120
			:weight 'medium)
    (set-face-attribute 'fixed-pitch nil
			:font "FiraCode Nerd Font Mono"
			:height 110
			:weight 'medium)
    (set-face-attribute 'font-lock-comment-face nil
			:slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil
			:slant 'italic))
#+end_src

** UI

#+begin_src emacs-lisp
  ;; Adjust line spacing
  (setq-default line-spacing 0.12)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)

  (set-fringe-mode 10)

  ;; Line numbers and truncation
  (column-number-mode t)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode 1)

  (setq visible-bell t)

  (electric-indent-mode -1)

  (global-hl-line-mode 1)

  (blink-cursor-mode nil)
#+end_src

*** Modus theme
#+begin_src emacs-lisp
  (setq 
   ;; font options for highlighting
   modus-themes-bold-constructs t
   modus-themes-italic-constructs t

   ;; org settings
   modus-themes-org-blocks 'tinted-background

   ;; headings
   modus-themes-headings 
   '((1 . (1.5))
     (2 . (1.3)))

   ;; modeline
   modus-themes-common-palette-overrides
   '((bg-mode-line-active bg-cyan-intense)
     (fg-mode-line-active fg-main)
     (border-mode-line-active blue-intense)))


  ;; This should be the last line of theme config: set variables first.
  ;(load-theme 'modus-vivendi-deuteranopia t)
  (load-theme 'modus-vivendi t)
#+end_src

** Execute when using daemon

#+begin_src emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
		(lambda (frame)
		  (setq doom-modeline-icon t)
		  (with-selected-frame frame
		    (will/set-font-faces))))
    (will/set-font-faces))
#+end_src

** Backups

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
	backup-by-copying t
	version-control t
	delete-old-version t
	kept-new-version 20
	kept-old-version t)
#+end_src

** Autosaves
#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

** Reload files on change
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  ;; Revert dired
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** IBuffer
#+begin_src emacs-lisp
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("programming" (or
                                 (mode . haskell-mode)
                                 (mode . nix-mode)))
                 ("magit" (name . "magit*"))
                 ("emacs" (or
                           (name . "^\\*scratch*$")
                           (name . "^\\*Messages\\*$")))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

* My modes
#+begin_src emacs-lisp
  (require 'dash)
#+end_src

** Tab out mode
#+begin_src emacs-lisp
  (defvar-local will/tab-out-delimiters 
      '(";" "(" ")" "[" "]" "{" "}" "|" "'" "\"" "`" "$" "<" ">"))

  (defun will/get-line-from-cursor (arg)
    (interactive "P")
    (let ((not-end-of-line (buffer-substring-no-properties
                            (+ 1 (point))
                            (line-end-position))))
      (if not-end-of-line
          (buffer-substring-no-properties
           (+ 1 (point))
           (line-end-position))
        (buffer-substring-no-properties
         (point)
         (line-end-position)))))

  (defun will/contains-delimiter (arg)
    (-first
     (lambda (head)
       (-contains? will/tab-out-delimiters head))
     (split-string arg "")))

  (defun will/line-contains-delimeter (arg)
    (interactive "P")
    (will/contains-delimiter (will/get-line-from-cursor nil)))

  (defun will/tab-out (arg)
    "Jump out of a parenthetical."
    (interactive "P")
    (let ((str (will/line-contains-delimeter nil)))
      (if str
          (search-forward str)
        (will/tab-fallback))))

  (defun will/tab-fallback ()
    "Fallback behavior of `will/exit-parens`."
    (let ((fallback-behavior (will/tab-original-keybinding)))
      (if fallback-behavior
          (call-interactively fallback-behavior))))

  (defun will/tab-original-keybinding ()
    "Get current keys' binding as if `will/exit-parens` didn't exist."
    ;; Copied from tab-jump-out package
    (let* ((will/tab-out-mode nil)
           (keys (this-single-command-keys)))
      (or (key-binding keys t)
          (key-binding (will/tab-out--fallback-translate-input keys) t))))

  (defun will/tab-out--fallback-translate-input (keys)
    ;; Copied from tab-jump-out package
    (let ((retval [])
          (i 0))
      (while (< i (length keys))
        (let ((j i)
              (translated local-function-key-map))
          (while (and (< j (length keys))
                      translated
                      (keymapp translated))
            (setq translated (cdr (assoc (aref keys j) (remove 'keymap translated)))
                  j (1+ j)))
          (setq retval (vconcat retval (cond ((symbolp translated)
                                              `[,translated])
                                             ((vectorp translated)
                                              translated)
                                             (t
                                              (substring keys i j)))))
          (setq i j)))
      retval))

  (defgroup will/tab-out nil
    "Custom group for `will/tab-out-mode`."
    :group 'editing
    :prefix "will/tab-out-")

  (defvar will/tab-out-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map [tab] 'will/tab-out)
      map)
    "Keymap for `will/tab-out`.")

  (define-minor-mode will/tab-out-mode
    "A minor mode that allows you to jump out of parentheticals with tab."
    :keymap will/tab-out-mode-map
    :global t)

  ;; (will/tab-out-mode 1)
  ;; (add-hook 'minibuffer-setup-hook (lambda () (will/tab-out-mode -1)))
  ;; (add-hook 'minibuffer-exit-hook (lambda () (will/tab-out-mode 1)))
#+end_src

* Tangle on save
THIS MUST BE THE LAST PART OF THE FILE IN ORDER TO WORK

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
